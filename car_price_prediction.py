# -*- coding: utf-8 -*-
"""car_price_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TWC_pf1-1eBQECsFbjn2c6H4pVzarrnt

Importing the dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data collection and processing"""

car_dataset= pd.read_csv('/content/car data.csv')

car_dataset.head()

car_dataset.shape

car_dataset.info()

car_dataset.isnull().sum()

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the categorical data"""

car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

"""Splitting the data and target


"""

X=car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y=car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting training and test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=2)

"""Model Training

1. Linear Regression
"""

# loading the linear regression model
lin_reg_model=LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on training data
training_data_prediction=lin_reg_model.predict(X_train)

print(training_data_prediction)

# R squared error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print("R squared error: ",error_score)

"""Visualise the actual prices and predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual prices vs Predicted prices")
plt.show()

#prediction on test data
test_data_prediction=lin_reg_model.predict(X_test)

# R squared error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared error: ",error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual prices vs Predicted prices")
plt.show()

"""2. Lasso Regression"""

# loading the lasso regression model
lass_reg_model=Lasso()

lass_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on training data
training_data_prediction=lass_reg_model.predict(X_train)

# R squared error
error_score=metrics.r2_score(Y_train,training_data_prediction)
print("R squared error: ",error_score)

"""Visualise the actual prices and predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual prices vs Predicted prices")
plt.show()

#prediction on test data
test_data_prediction=lass_reg_model.predict(X_test)

# R squared error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print("R squared error: ",error_score)

plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual prices vs Predicted prices")
plt.show()